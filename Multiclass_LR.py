# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1as3UAShHu1xmQYw834AExn2szxGfr9pZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import datasets

class multiclass_linear_regression():
  def __init__(self,l_r = 0.018,nr_iter=3000):
    self.l_r = l_r
    self.nr_iter = nr_iter
    self.w = None
    self.b = None

  def fit(self,x_train,y_train):
    nr_samples,nr_weights = x_train.shape
    self.w = np.zeros(nr_weights)
    self.b = 0
    print(self.w.shape)
    for i in range(self.nr_iter):

      pred = x_train @ self.w +self.b

      w_gd = (1/nr_samples)*(x_train.T @ (-y_train + pred))
      b_gd = np.mean((-y_train+pred),axis = 0)
      self.w =self.w - self.l_r * w_gd
      self.b =self.b  - self.l_r * b_gd


  def predict(self,x_test):
    self.pred =  x_test @ self.w - self.b
    return self.pred


x,y = datasets.make_regression(n_samples = 1000,n_features = 10,noise =20,random_state = 4)
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 42)

reg = multiclass_linear_regression()
reg.fit(x_train,y_train)
pred = reg.predict(x_test)

def mse(y_test,pred):
    return np.mean((y_test - pred)**2 )

print(f'MSE = {mse(y_test,pred)}')