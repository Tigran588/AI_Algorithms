# -*- coding: utf-8 -*-
"""Untitled51.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1as3UAShHu1xmQYw834AExn2szxGfr9pZ
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn import datasets

state = np.random.RandomState(seed = 42)
x = state.rand(1000)
y  = np.sqrt(x + 1)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state= 42)

class LinearRegression:
  def __init__(self,w =2,b=2,learning_rate = 0.01,threshold = 0.001):
    self.w = w
    self.b = b
    self.l_r = learning_rate
    self.tr = threshold

  def fit(self,x_train,y_train):
    lose = np.mean(self.w*x_train +self.b - y_train,axis = 0 )
    for i in range(2000):
      w_i = np.mean((self.w - 2*self.l_r*(self.w * x_train +self.b - y_train)*x_train ),axis = 0)
      b_i = np.mean(self.b  -self.l_r*2*(self.w*x_train + self.b - y_train),axis = 0)
      self.w = w_i
      self.b = b_i
      lose =  np.mean(self.w*x_train +self.b - y_train,axis = 0 )
      if lose < self.tr:
        return lose

  def predict(self,x_test):
    return(self.w*x_test + self.b)

R = LinearRegression()
lose_train = R.fit(x_train,y_train)
pred = R.predict(x_test)
lose_test = np.mean((pred-y_test)**2)
lose_test,lose_train