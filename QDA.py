# -*- coding: utf-8 -*-
"""Untitled48.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y33V8CKFrkGMw7vELSv_Ith33G9-PK8r
"""

import numpy as np
import pandas as pd

from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris

class QDA:

  def formula(self,x,cov_mat,mean,pr_k):
    cov_mat_inv = np.linalg.inv(cov_mat)
    sigma = -0.5*(np.log(np.linalg.det(cov_mat))) -((x-mean).T).dot(cov_mat_inv).dot(x-mean) - np.log(pr_k)
    return sigma
  def fit(self,x_train,y_train):
    self.all_params = {}
    labels,counts = np.unique(y_train,return_counts= True)

    for i in range(len(labels)):
      params = {}
      x_i = x_train[labels[i] == y_train]
      params['mean'] = np.mean(x_i,axis = 0)
      params['pr_k']  = x_i.shape[0]/len(x_train)
      params['cov_mat'] = ((x_i - params['mean']).T).dot((x_i - params['mean'])) / (len(x_train) - 1)
      self.all_params[labels[i]]  = params
    return self.all_params

  def pred_label_val(self,x_test):
    final_val = []
    for i in x_test:
      val = []
      for j in self.all_params.values():
        val.append(self.formula(i,j['cov_mat'],j['mean'],j['pr_k']))
      final_val.append(val)
    return np.array(final_val)


  def pred(self,x_test):
    final_val = self.pred_label_val(x_test)
    return np.argmax(final_val,axis =1)

iris = load_iris()
X  = iris.data
Y = iris.target

x_train,x_test,y_train,y_test = train_test_split(X,Y,test_size =0.24,random_state =24)

qda = QDA()
a = qda.fit(x_train,y_train)
#qda.pred_label_val(x_test)
predictions = qda.pred(x_test)

accuracy = accuracy_score(predictions,y_test)
accuracy



