# -*- coding: utf-8 -*-
"""VGG+Resnet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dWNG1TKWL6ApBeG__eLq7w30gDps3Z8_
"""

import os
os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'

import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
from tensorflow.keras.datasets import cifar10, mnist

tf.random.set_seed(1)

(x_train,y_train),(x_test,y_test) = cifar10.load_data()

x_train = x_train/255
x_test = x_test / 255

y_train = keras.utils.to_categorical(y_train,10)
y_test = keras.utils.to_categorical(y_test,10)

x_test.shape

inputs = keras.Input(shape = (32,32,3),name = 'img')
x = layers.Conv2D(64,3,activation = 'relu')(inputs)
x = layers.Conv2D(64,3,activation = 'relu')(x)
output1 = layers.MaxPooling2D((2,2))(x)

#x = layers.MaxPooling2D((2,2))(x)


x = layers.Conv2D(64,3,activation = 'relu',padding = 'same')(x)
x = layers.Conv2D(64,3,activation = 'relu' ,padding = 'same')(x)
x = layers.MaxPooling2D((2,2))(x)
output2 = layers.add([output1,x])

x = layers.Conv2D(64,3,activation = 'relu',padding = 'same')(x) #output2
x  = layers.Convolution2D(128,3,activation = 'relu',padding = 'same')(x)
output3 = layers.Convolution2D(128,3,activation = 'relu',padding = 'same')(x)

x = layers.Convolution2D(128,3,activation = 'relu',padding = 'same')(output3) #output3
x = layers.Convolution2D(128,3,activation = 'relu',padding = 'same')(x)
#x = layers.MaxPooling2D((2,2),padding = 'same')(x)
output4 = layers.add([output3,x])

x = layers.Convolution2D(256,3,activation = 'relu',padding = 'same')(output4)
x = layers.Convolution2D(256,3,activation = 'relu',padding = 'same')(x)
x = layers.Convolution2D(256,3,activation = 'relu',padding = 'same')(x)
output5 = layers.Convolution2D(512,3,activation = 'relu',padding = 'same')(x)


x = layers.Convolution2D(512,3,activation = 'relu',padding ='same')(output5)
x = layers.Convolution2D(512,3,activation = 'relu',padding ='same')(output5)
x = layers.Convolution2D(512,3,activation = 'relu',padding ='same')(x)
x = layers.Convolution2D(512,3,activation = 'relu',padding ='same')(x)
output6 = layers.add([output5,x])
output = layers.MaxPooling2D((2,2))(output6)

x = layers.Dropout(0.2)(x)
x = layers.Flatten()(output)
x = layers.Dense(512,activation = 'relu')(x)
x = layers.Dense(256,activation = 'relu')(x)
x = layers.Dense(64,activation = 'relu')(x)
x = layers.Dropout(0.5)(x)
#x = layers.Dropout(0.2)(x)
outputs = layers.Dense(10,activation = 'softmax')(x)



model = keras.Model(inputs,outputs)
model.summary()

optim = tf.keras.optimizers.Adam(learning_rate = 0.0001)
model.compile(optimizer = optim,loss = 'categorical_crossentropy',metrics = 'accuracy')

model.fit(x_train,y_train,batch_size = 64, epochs = 13, validation_data = (x_test,y_test))

model.evaluate(x_test,y_test)