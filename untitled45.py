# -*- coding: utf-8 -*-
"""Untitled45.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cKlFZjaatkeLPl-9ECQ3qJysSffxwye9
"""

import numpy as np
import pandas as pd

data = pd.DataFrame(
    {'x':[0,1,4,2,0,1,3,7,6],
    'y':[1,1,0,3,5,6,6,4,8,]})

X = data.values

class K_means:
  def __init__(self,k=2,max_iter = 500,tol = 0.5):
    self.k = k
    self.max_iter = max_iter
    self.tol = tol
    self.centroids = None

  def init_centroids(self,x):
    rs  = np.random.RandomState(seed= 42)
    self.centroids = x[rs.choice(range(len(x)),self.k)]
    return np.array(self.centroids)

  def closest_centroids(self,X):
    dist_matrix = []
    for i in X:
      dist_matrix.append(np.sqrt(np.sum((i - self.centroids)**2,axis = 1)))
    return np.argmin(dist_matrix,axis = 1)

  def update_centroids(self,X,label_ids):
    new_centroids  = []
    for i in range(self.k):
      new_centroids.append(np.mean(X[i == label_ids],axis = 0))
    return np.array(new_centroids)

  def fit(self,X):
    self.centroids = self.init_centroids(X)

    i  =1
    not_convergent = True
    while not_convergent and (i < self.max_iter):
      current_labels = self.closest_centroids(X)
      new_centroids = self.update_centroids(X,current_labels)
      norm = np.sqrt(np.sum((self.centroids - new_centroids)**2))
      not_convergent  = norm > self.tol
      self.centroids = new_centroids
      i +=1
    self.labels = current_labels
    print(f'convergent {i}')

k = K_means(k=2,tol = 0.01)
k.fit(X)
k.labels